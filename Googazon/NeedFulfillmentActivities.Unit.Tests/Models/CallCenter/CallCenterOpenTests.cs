using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NeedFulfillmentActivities.Facades;
using NeedFulfillmentActivities.Models;
using NeedFulfillmentActivities.Models.BusinessHours;
using NeedFulfillmentActivities.Texts;
using System;

namespace NeedFulfillmentActivities.Unit.Tests.Models.CallCenter
{
    [TestClass]
    public class CallCenterOpenTests
    {
        private IOpenHours _openHours;

        [TestInitialize]
        public void Setup()
        {
            Environment.SetEnvironmentVariable(new CallCenterHoursKey(), "[{'DayOfWeek': 'Sunday','OpenTime': '10:00:00','CloseTime': '16:00:00'},{'DayOfWeek': 'Monday','OpenTime': '6:00:00','CloseTime': '18:00:00'},{'DayOfWeek': 'Tuesday','OpenTime': '6:00:00','CloseTime': '18:00:00'},{'DayOfWeek': 'Wednesday','OpenTime': '6:00:00','CloseTime': '18:00:00'},{'DayOfWeek': 'Thursday','OpenTime': '6:00:00','CloseTime': '18:00:00'},{'DayOfWeek': 'Friday','OpenTime': '6:00:00','CloseTime': '18:00:00'},{'DayOfWeek': 'Saturday','OpenTime': '8:00:00','CloseTime': '17:00:00'}]");
            _openHours = new OpenHours(new CallCenterHoursKey());
        }

        // note: jan 6 2018 is a Saturday

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtLowerEdgeOfClosedRange_WhenAskingIsOpen_ThenItShouldReturnFalse()
        {
            // arrange
            IContactMethodOpen callCenterOpen = new ContactMethodOpenTestImplementation(new FakeDateTime(2018, 1, 6, 17, 00, 01), _openHours);

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeFalse();
        }

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtUpperEdgeOfClosedRange_WhenAskingIsOpen_ThenItShouldReturnFalse()
        {
            // arrange
            IContactMethodOpen callCenterOpen = new ContactMethodOpenTestImplementation(new FakeDateTime(2018, 1, 6, 7, 59, 59), _openHours);

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeFalse();
        }

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtLowerEdgeOfOpenRange_WhenAskingIsOpen_ThenItShouldReturnTrue()
        {
            // arrange
            IContactMethodOpen callCenterOpen = new ContactMethodOpenTestImplementation(new FakeDateTime(2018, 1, 6, 8, 0, 0), _openHours);

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeTrue();
        }

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtUpperEdgeOfOpenRange_WhenAskingIsOpen_ThenItShouldReturnTrue()
        {
            // arrange
            IContactMethodOpen callCenterOpen = new ContactMethodOpenTestImplementation(new FakeDateTime(2018, 1, 6, 17, 0, 0), _openHours);

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeTrue();
        }
    }

    public class ContactMethodOpenTestImplementation : ContactMethodOpen
    {
        public ContactMethodOpenTestImplementation(IDateTime dateTime, IOpenHours openHours) : base(dateTime, openHours)
        {
        }
    }

    public class FakeDateTime :  IDateTime
    {
        private readonly int _year;
        private readonly int _month;
        private readonly int _day;
        private readonly int _hour;
        private readonly int _minute;
        private readonly int _second;

        public FakeDateTime(int year, int month, int day, int hour, int minute, int second)
        {
            _year = year;
            _month = month;
            _day = day;
            _hour = hour;
            _minute = minute;
            _second = second;
        }
        public DateTime UtcNow() => new DateTime(_year, _month, _day, _hour, _minute, _second);
    }
}