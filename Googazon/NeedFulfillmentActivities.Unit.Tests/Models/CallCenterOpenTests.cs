using System;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NeedFulfillmentActivities.Facades;
using NeedFulfillmentActivities.Models;

namespace NeedFulfillmentActivities.Unit.Tests.Models
{
    [TestClass]
    public class CallCenterOpenTests
    {
        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtLowerEdgeOfClosedRange_WhenAskingIsOpen_ThenItShouldReturnCorrectBoolean()
        {
            // arrange
            CallCenterOpen callCenterOpen = new CallCenterOpen(new FakeDateTime(2019, 1, 1, 18, 00, 01));

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeFalse();
        }

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtUpperEdgeOfClosedRange_WhenAskingIsOpen_ThenItShouldReturnCorrectBoolean()
        {
            // arrange
            CallCenterOpen callCenterOpen = new CallCenterOpen(new FakeDateTime(2019, 1, 1, 5, 59, 59));

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeFalse();
        }

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtLowerEdgeOfOpenRange_WhenAskingIsOpen_ThenItShouldReturnCorrectBoolean()
        {
            // arrange
            CallCenterOpen callCenterOpen = new CallCenterOpen(new FakeDateTime(2019, 1, 1, 6, 0, 0));

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeTrue();
        }

        [TestMethod, TestCategory("Unit")]
        public void GivenDateTimeAtUpperEdgeOfOpenRange_WhenAskingIsOpen_ThenItShouldReturnCorrectBoolean()
        {
            // arrange
            CallCenterOpen callCenterOpen = new CallCenterOpen(new FakeDateTime(2019, 1, 1, 18, 0, 0));

            // act
            bool actual = callCenterOpen.IsOpen();

            // assert
            actual.Should().BeTrue();
        }
    }

    public class FakeDateTime :  IDateTime
    {
        private readonly int _year;
        private readonly int _month;
        private readonly int _day;
        private readonly int _hour;
        private readonly int _minute;
        private readonly int _second;

        public FakeDateTime(int year, int month, int day, int hour, int minute, int second)
        {
            _year = year;
            _month = month;
            _day = day;
            _hour = hour;
            _minute = minute;
            _second = second;
        }
        public DateTime UtcNow() => new DateTime(_year, _month, _day, _hour, _minute, _second);
    }
}